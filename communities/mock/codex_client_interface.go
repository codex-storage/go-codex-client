// Code generated by MockGen. DO NOT EDIT.
// Source: codex_client_interface.go
//
// Generated by this command:
//
//	mockgen -package=mock_communities -source=codex_client_interface.go -destination=mock/codex_client_interface.go
//

// Package mock_communities is a generated GoMock package.
package mock_communities

import (
	context "context"
	codexmanifest "go-codex-client/codexmanifest"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCodexClientInterface is a mock of CodexClientInterface interface.
type MockCodexClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCodexClientInterfaceMockRecorder
	isgomock struct{}
}

// MockCodexClientInterfaceMockRecorder is the mock recorder for MockCodexClientInterface.
type MockCodexClientInterfaceMockRecorder struct {
	mock *MockCodexClientInterface
}

// NewMockCodexClientInterface creates a new mock instance.
func NewMockCodexClientInterface(ctrl *gomock.Controller) *MockCodexClientInterface {
	mock := &MockCodexClientInterface{ctrl: ctrl}
	mock.recorder = &MockCodexClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodexClientInterface) EXPECT() *MockCodexClientInterfaceMockRecorder {
	return m.recorder
}

// Download mocks base method.
func (m *MockCodexClientInterface) Download(cid string, output io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", cid, output)
	ret0, _ := ret[0].(error)
	return ret0
}

// Download indicates an expected call of Download.
func (mr *MockCodexClientInterfaceMockRecorder) Download(cid, output any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockCodexClientInterface)(nil).Download), cid, output)
}

// DownloadWithContext mocks base method.
func (m *MockCodexClientInterface) DownloadWithContext(ctx context.Context, cid string, output io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadWithContext", ctx, cid, output)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadWithContext indicates an expected call of DownloadWithContext.
func (mr *MockCodexClientInterfaceMockRecorder) DownloadWithContext(ctx, cid, output any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadWithContext", reflect.TypeOf((*MockCodexClientInterface)(nil).DownloadWithContext), ctx, cid, output)
}

// FetchManifestWithContext mocks base method.
func (m *MockCodexClientInterface) FetchManifestWithContext(ctx context.Context, cid string) (codexmanifest.CodexManifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchManifestWithContext", ctx, cid)
	ret0, _ := ret[0].(codexmanifest.CodexManifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchManifestWithContext indicates an expected call of FetchManifestWithContext.
func (mr *MockCodexClientInterfaceMockRecorder) FetchManifestWithContext(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchManifestWithContext", reflect.TypeOf((*MockCodexClientInterface)(nil).FetchManifestWithContext), ctx, cid)
}

// HasCid mocks base method.
func (m *MockCodexClientInterface) HasCid(cid string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasCid", cid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasCid indicates an expected call of HasCid.
func (mr *MockCodexClientInterfaceMockRecorder) HasCid(cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasCid", reflect.TypeOf((*MockCodexClientInterface)(nil).HasCid), cid)
}

// LocalDownload mocks base method.
func (m *MockCodexClientInterface) LocalDownload(cid string, output io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalDownload", cid, output)
	ret0, _ := ret[0].(error)
	return ret0
}

// LocalDownload indicates an expected call of LocalDownload.
func (mr *MockCodexClientInterfaceMockRecorder) LocalDownload(cid, output any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalDownload", reflect.TypeOf((*MockCodexClientInterface)(nil).LocalDownload), cid, output)
}

// LocalDownloadWithContext mocks base method.
func (m *MockCodexClientInterface) LocalDownloadWithContext(ctx context.Context, cid string, output io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalDownloadWithContext", ctx, cid, output)
	ret0, _ := ret[0].(error)
	return ret0
}

// LocalDownloadWithContext indicates an expected call of LocalDownloadWithContext.
func (mr *MockCodexClientInterfaceMockRecorder) LocalDownloadWithContext(ctx, cid, output any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalDownloadWithContext", reflect.TypeOf((*MockCodexClientInterface)(nil).LocalDownloadWithContext), ctx, cid, output)
}

// RemoveCid mocks base method.
func (m *MockCodexClientInterface) RemoveCid(cid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCid", cid)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCid indicates an expected call of RemoveCid.
func (mr *MockCodexClientInterfaceMockRecorder) RemoveCid(cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCid", reflect.TypeOf((*MockCodexClientInterface)(nil).RemoveCid), cid)
}

// TriggerDownload mocks base method.
func (m *MockCodexClientInterface) TriggerDownload(cid string) (codexmanifest.CodexManifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerDownload", cid)
	ret0, _ := ret[0].(codexmanifest.CodexManifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerDownload indicates an expected call of TriggerDownload.
func (mr *MockCodexClientInterfaceMockRecorder) TriggerDownload(cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerDownload", reflect.TypeOf((*MockCodexClientInterface)(nil).TriggerDownload), cid)
}

// TriggerDownloadWithContext mocks base method.
func (m *MockCodexClientInterface) TriggerDownloadWithContext(ctx context.Context, cid string) (codexmanifest.CodexManifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerDownloadWithContext", ctx, cid)
	ret0, _ := ret[0].(codexmanifest.CodexManifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerDownloadWithContext indicates an expected call of TriggerDownloadWithContext.
func (mr *MockCodexClientInterfaceMockRecorder) TriggerDownloadWithContext(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerDownloadWithContext", reflect.TypeOf((*MockCodexClientInterface)(nil).TriggerDownloadWithContext), ctx, cid)
}

// Upload mocks base method.
func (m *MockCodexClientInterface) Upload(data io.Reader, filename string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", data, filename)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockCodexClientInterfaceMockRecorder) Upload(data, filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockCodexClientInterface)(nil).Upload), data, filename)
}

// UploadArchive mocks base method.
func (m *MockCodexClientInterface) UploadArchive(encodedArchive []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadArchive", encodedArchive)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadArchive indicates an expected call of UploadArchive.
func (mr *MockCodexClientInterfaceMockRecorder) UploadArchive(encodedArchive any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadArchive", reflect.TypeOf((*MockCodexClientInterface)(nil).UploadArchive), encodedArchive)
}
