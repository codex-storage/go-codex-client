// Code generated by MockGen. DO NOT EDIT.
// Source: codex_client_interface.go
//
// Generated by this command:
//
//	mockgen -package=mock_communities -source=codex_client_interface.go -destination=mock/codex_client_interface.go
//

// Package mock_communities is a generated GoMock package.
package mock_communities

import (
	context "context"
	communities "go-codex-client/communities"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCodexClientInterface is a mock of CodexClientInterface interface.
type MockCodexClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCodexClientInterfaceMockRecorder
	isgomock struct{}
}

// MockCodexClientInterfaceMockRecorder is the mock recorder for MockCodexClientInterface.
type MockCodexClientInterfaceMockRecorder struct {
	mock *MockCodexClientInterface
}

// NewMockCodexClientInterface creates a new mock instance.
func NewMockCodexClientInterface(ctrl *gomock.Controller) *MockCodexClientInterface {
	mock := &MockCodexClientInterface{ctrl: ctrl}
	mock.recorder = &MockCodexClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodexClientInterface) EXPECT() *MockCodexClientInterfaceMockRecorder {
	return m.recorder
}

// HasCid mocks base method.
func (m *MockCodexClientInterface) HasCid(cid string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasCid", cid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasCid indicates an expected call of HasCid.
func (mr *MockCodexClientInterfaceMockRecorder) HasCid(cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasCid", reflect.TypeOf((*MockCodexClientInterface)(nil).HasCid), cid)
}

// TriggerDownloadWithContext mocks base method.
func (m *MockCodexClientInterface) TriggerDownloadWithContext(ctx context.Context, cid string) (*communities.CodexManifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerDownloadWithContext", ctx, cid)
	ret0, _ := ret[0].(*communities.CodexManifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerDownloadWithContext indicates an expected call of TriggerDownloadWithContext.
func (mr *MockCodexClientInterfaceMockRecorder) TriggerDownloadWithContext(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerDownloadWithContext", reflect.TypeOf((*MockCodexClientInterface)(nil).TriggerDownloadWithContext), ctx, cid)
}
